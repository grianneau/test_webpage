(()=>{"use strict";var e={n:t=>{var r=t&&t.__esModule?()=>t.default:()=>t;return e.d(r,{a:r}),r},d:(t,r)=>{for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{IcoqSubprocess:()=>y});const r=require("assert");var s=e.n(r);const i=require("fs");var a=e.n(i);const n=require("child_process"),o=require("events"),c=require("byline");var d=e.n(c);const u=require("path");var p=e.n(u);const l=require("fflate-unzip");var h=e.n(l);const m=require("find");class f extends o.EventEmitter{constructor(e){super(),this.dir=e}async loadPackages(e){await this._plugins,Array.isArray(e)||(e=[e]);for(let t of e)try{await this.unzip(t),this.emit("message",{data:["LibProgress",{uri:t,done:!0}]})}catch(e){this.emit("message",{data:["LibError",t,""+e]})}this.emit("message",{data:["LoadedPkg",e]})}async unzip(e){var t=await(await fetch(e)).arrayBuffer();return h()(t,{to:{directory:this.dir}})}appropriatePlugins(e){var t=p().join(e,"coqlib","plugins");return a().mkdirSync(this.dir,{recursive:!0}),this._plugins=new Promise(((e,r)=>m.eachfile(/\.cmxs$/,t,(e=>{try{this.ln_sf(e,p().join(this.dir,p().basename(e)))}catch(e){this.emit("message",{data:["LibError","<native>",""+e]})}})).end(e)))}ln_sf(e,t){try{a().unlinkSync(t)}catch{}a().symlinkSync(e,t)}}class g extends o.EventEmitter{constructor(e,t,r){super(),this.cp=(0,n.spawn)(e,t,r),d()(this.cp.stdout).on("data",(e=>{try{for(let t of JSON.parse(e))this.emit("message",{data:t})}catch(t){console.error("(from subprocess)",e.toString("utf-8"),t)}})),setTimeout((()=>this.emit("message",{data:["Boot"]})),0),this.cp.on("error",(e=>this.emit("error",e))),this.cp.on("exit",((e,t)=>this.emit("exit",e,t)))}end(){this.cp.stdin.end()}terminate(){this.cp.kill("SIGINT")}addEventListener(e,t){this.on(e,t)}removeEventListener(e,t){this.off(e,t)}postMessage(e){"Put"!==e[0]?("string"!=typeof e&&(e=JSON.stringify(e)),this.cp.stdin.write(e+"\n")):this.putFile(e[1],e[2])}putFile(e,t){a().mkdirSync(e.replace(/[/][^/]+$/,""),{recursive:!0}),a().writeFileSync(e,t)}}class y extends g{constructor(e={}){e={...y.DEFAULT_OPTIONS,...e};var t=y.findBinDir(),[r,s]=y.findExecutable(t,e.mode);super(r,[...s,"-stdin"],{cwd:e.cwd,env:{PATH:process.env.PATH,CAML_LD_LIBRARY_PATH:[t,process.env.CAML_LD_LIBRARY_PATH||""].join(":")}}),this.binDir=t,this.packages=new f("/tmp/wacoq/lib"),this.packages.on("message",(e=>this.emit("message",e))),this.packages.appropriatePlugins(this.binDir)}postMessage(e){"LoadPkg"!==e[0]?super.postMessage(e):this.packages.loadPackages(e[1])}static findBinDir(){var e=__dirname,t=global.require("find-up").sync("bin/coq",{cwd:e,type:"directory"});return s()(t,"bin/coq not found"),t}static findExecutable(e,t){var r=`${e}/../icoq.bc`,i=`${e}/../icoq.exe`;switch(t){case"byte":return["ocamlrun",[r]];case"native":return[i,[]];case"best":return a().existsSync(i)?[i,[]]:["ocamlrun",[r]];default:s()(!1,`invalid mode '${t}'`)}}}y.DEFAULT_OPTIONS={mode:"best",cwd:"/tmp/wacoq"};var v=exports;for(var b in t)v[b]=t[b];t.__esModule&&Object.defineProperty(v,"__esModule",{value:!0})})();